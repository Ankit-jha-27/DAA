#include <stdio.h>
#include <stdlib.h>


int partition(int arr[], int LB, int HB) {
    int pivot = arr[LB]; // Choosing the first element as pivot
    int start = LB + 1;   // Start from the next element
    int end = HB;

    while (start <= end) {
        // Move start index to the end while the value is less than or equal to the pivot
        while (start <= HB && arr[start] <= pivot) 
            start++;
        
        // Move end index to the start while the value is greater than the pivot
        while (end >= LB && arr[end] > pivot) 
            end--;
        
        // Swap the elements if start is still less than end
        if (start < end) {
            

            int temp = arr[start];
            arr[start] = arr[end];
            arr[end]= temp;


        }
    }
    
    // Swap the pivot element with the end element
    
        
            int temp2 = arr[end];
            arr[end] = arr[LB];
            arr[LB]= temp2;
        
    return end; // Return the index of the pivot
}

void quickSort(int arr[], int LB, int HB) {
    
    if (LB < HB) {
        int pivotIndex = partition(arr, LB, HB);
        quickSort(arr, LB, pivotIndex - 1);  // Sort start part
        quickSort(arr, pivotIndex + 1, HB); // Sort end part
    }
}

void printArray(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    int n;
    printf("Enter the size of array: ");
    scanf("%d", &n);
    int *arr = (int *)malloc(n * sizeof(int));

    for (int i = 0; i < n; i++) {
        printf("The Element is: ");
        scanf("%d", &arr[i]);  
    }

    printf("Original array: \n");
    printArray(arr, n);

    quickSort(arr, 0, n - 1);

    printf("Sorted array: \n");
    printArray(arr, n);

    free(arr); // Free allocated memory
    return 0;
}





// Best-Case Time Complexity: O(n.log n)  and  Worst-Case Time Complexity: O(nÂ²)
