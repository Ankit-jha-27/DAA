#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX 100
  


void floydWarshall(int graph[MAX][MAX], int V) {
    int dist[V][V];

    // Initialize the solution matrix with the input graph's weights
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (graph[i][j] == 0 && i != j) {
                dist[i][j] = INT_MAX;  // No direct edge
            } else {
                dist[i][j] = graph[i][j];  
            }
        }
    }

    // Floyd-Warshall algorithm: update the distances using intermediate vertices
    for (int k = 0; k < V; k++) {
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                if (dist[i][k] != INT_MAX && dist[k][j] != INT_MAX && dist[i][k] + dist[k][j] < dist[i][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
    }

    // Print the shortest distance matrix
    printf("Shortest distances between every pair of vertices:\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (dist[i][j] == INT_MAX) {
                printf("INF\t");
            } else {
                printf("%d\t", dist[i][j]);
            }
        }
        printf("\n");
    }
}

int main() {
    int V;

    // Input number of vertices
    printf("Enter number of vertices: ");
    scanf("%d", &V);

    int graph[MAX][MAX];

    // Input the adjacency matrix representing the graph
    printf("Enter the adjacency matrix (enter 0 for no edge, positive values for edge weights):\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            scanf("%d", &graph[i][j]);
        }
    }
    floydWarshall(graph, V);

    return 0;
}
