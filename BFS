
#include <stdio.h>
#include <stdlib.h>

#define MAX 100 
typedef struct Queue {
    int items[MAX];
    int front, rear;
} Queue;
void initQueue(Queue* q) {
    q->front = -1;
    q->rear = -1;
}
int isEmpty(Queue* q) {
    return q->front == -1;
}
void enqueue(Queue* q, int value) {
    if (q->rear == MAX - 1) {
        printf("Queue Overflow\n");
        return;
    }
    if (q->front == -1) 
        q->front = 0;
    q->items[++q->rear] = value;
}
int dequeue(Queue* q) {
    if (isEmpty(q)) {
        printf("Queue Underflow\n");
        return -1;
    }
    int value = q->items[q->front];
    if (q->front == q->rear){
        q->front = q->rear = -1; 
    }
    else 
        q->front++;
    return value;
}
void BFS(int graph[MAX][MAX], int numVertices, int startVertex) {
    int visited[MAX] = {0}; 
    Queue q;
    initQueue(&q);
    visited[startVertex] = 1;
    enqueue(&q, startVertex);
    printf("BFS Traversal: ");
    while (!isEmpty(&q)) {
        int currentVertex = dequeue(&q);
        printf("%d ", currentVertex);
        for (int i = 0; i < numVertices; i++) {
            if (graph[currentVertex][i] == 1 && !visited[i]) {
                visited[i] = 1;
                enqueue(&q, i);
            }
        }
    }
    printf("\n");
}
int main() {
    int graph[MAX][MAX], numVertices, startVertex;
    printf("Enter the number of vertices: ");
    scanf("%d", &numVertices);
    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < numVertices; i++) 
        for (int j = 0; j < numVertices; j++) 
            scanf("%d", &graph[i][j]); 
    printf("Enter the starting vertex: ");
    scanf("%d", &startVertex);
    BFS(graph, numVertices, startVertex);
    return 0;
}


















