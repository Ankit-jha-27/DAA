#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int profit;
    int weight;
    int index; 
} Item;

void swap(Item *a, Item *b) {
    Item temp = *a;
    *a = *b;
    *b = temp;
}


void sortByProfit(Item *items, int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (items[j].profit < items[j + 1].profit) {
                swap(&items[j], &items[j + 1]);
            }
        }
    }
}

void sortByWeight(Item *items, int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (items[j].weight > items[j + 1].weight) {
                swap(&items[j], &items[j + 1]);
            }
        }
    }
}

void sortByProfitWeightRatio(Item *items, int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if ((float)items[j].profit / items[j].weight < (float)items[j + 1].profit / items[j + 1].weight) {
                swap(&items[j], &items[j + 1]);
            }
        }
    }
}

void computeGreedy(Item *items, int n, int capacity) {
    float totalProfit = 0;
    float fractionTaken[n]; 
    for (int i = 0; i < n; i++)
        fractionTaken[i] = 0.0; 

    for (int i = 0; i < n && capacity > 0; i++) {
        if (items[i].weight <= capacity) {
            totalProfit += items[i].profit;
            fractionTaken[items[i].index] = 1.0;
            capacity -= items[i].weight;
        } else {
            totalProfit += items[i].profit * ((float)capacity / items[i].weight);
            fractionTaken[items[i].index] = (float)capacity / items[i].weight;
            capacity = 0;
        }
    }

    printf("\nMaximum Profit: %.2f\n", totalProfit);
    printf("Fractions Taken: ");
    for (int i = 0; i < n; i++)
        printf("%.2f ", fractionTaken[i]);
    printf("\n");
}

int main() {
    int n, capacity, choice;
    printf("Enter the number of items: ");
    scanf("%d", &n);
    printf("Enter maximum capacity of the knapsack: ");
    scanf("%d", &capacity);

    Item *items = (Item *)malloc(n * sizeof(Item));

    for (int i = 0; i < n; i++) {
        printf("Enter profit and weight of item %d: ", i + 1);
        scanf("%d %d", &items[i].profit, &items[i].weight);
        items[i].index = i; 
    }

    do {
        printf("\n1. Greedy by Profit\n");
        printf("2. Greedy by Weight\n");
        printf("3. Greedy by Profit/Weight Ratio\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        Item *tempItems = (Item *)malloc(n * sizeof(Item));
        for (int i = 0; i < n; i++)
            tempItems[i] = items[i];

        switch (choice) {
            case 1:
                sortByProfit(tempItems, n);
                computeGreedy(tempItems, n, capacity);
                break;
            case 2:
                sortByWeight(tempItems, n);
                computeGreedy(tempItems, n, capacity);
                break;
            case 3:
                sortByProfitWeightRatio(tempItems, n);
                computeGreedy(tempItems, n, capacity);
                break;
            case 4:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice. Try again.\n");
        }

        free(tempItems); 
    } while (choice != 4);

    free(items); 
    return 0;
}
