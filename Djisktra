#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#define MAX 100

void djistra(int graph[MAX][MAX], int src, int V) {
    int dist[V];
    int Visited[V];

    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX;
        Visited[i] = 0;
    }
    dist[src] = 0;
    
    for (int count = 0; count < V - 1; count++) {
        // Find the vertex with minimum distance from the set of vertices not yet processed
        int min = INT_MAX;
        int u = -1;
        for (int i = 0; i < V; i++) {
            if (!Visited[i] && dist[i] <= min) {
                min = dist[i];
                u = i;
            }
        }

        Visited[u] = 1;

        for (int v = 0; v < V; v++) {
            if (!Visited[v] && graph[u][v] && dist[u] != INT_MAX 
                && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    // Print result
    printf("Vertex \t Distance from Source\n");
    for (int i = 0; i < V; i++) {
        if (dist[i] == INT_MAX)
            printf("%d \t\t Infinity\n", i);
        else
            printf("%d \t\t %d\n", i, dist[i]);
    }
}

int main() {
    int V, src;
    printf("Enter number of Vertices: ");
    scanf("%d", &V);

   int graph[MAX][MAX];

    printf("Enter Adjacency matrix:\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    printf("Enter the source Vertex: ");
    scanf("%d", &src);

    djistra(graph, src, V);
    return 0;
}
